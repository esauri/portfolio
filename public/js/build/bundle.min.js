/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _projects = __webpack_require__(1);

	(function () {
	  'use strict';

	  var sidebar = document.querySelector('.nav-global'),
	      scrollToTopBtn = void 0;

	  scrollToTopBtn = document.getElementById('js-scroll-to-top') ? document.getElementById('js-scroll-to-top') : null;

	  if (scrollToTopBtn !== null) {
	    scrollToTopBtn.addEventListener('click', function (event) {
	      scrollTo(document.body);
	    });
	  }

	  // If work page
	  if (document.getElementsByClassName('project-carousel').length > 0) {
	    (0, _projects.Projects)();
	  }

	  function scrollTo(element) {
	    var to = 0,
	        duration = 500,
	        start = element.scrollTop,
	        change = to - start,
	        currentTime = 0,
	        increment = 20;

	    var animateScroll = function animateScroll() {
	      currentTime += increment;
	      var val = Math.easeInOutQuad(currentTime, start, change, duration);
	      element.scrollTop = val;
	      if (currentTime < duration) {
	        setTimeout(animateScroll, increment);
	      }
	    };
	    animateScroll();
	  }

	  Math.easeInOutQuad = function (time, start, change, duration) {
	    time /= duration / 2;
	    if (time < 1) return change / 2 * time * time + start;
	    time--;
	    return -change / 2 * (time * (time - 2) - 1) + start;
	  };
	})();

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	function Projects() {
	  var currentProjectSlide = void 0,
	      projectSlideshow = void 0,
	      projectSlideNav = void 0,
	      projectSlides = void 0,
	      prevProjectBtn = void 0,
	      nextProjectBtn = void 0,
	      resumeProjectBtn = void 0,
	      carouselTip = void 0,
	      autoRun = void 0,
	      positionX = void 0,
	      positionY = void 0,
	      SCROLL_THRESHOLD = 60,
	      scrolling = false;

	  var PROJECT_TIMER = 5000;
	  // Get the slide show
	  projectSlideshow = document.getElementsByClassName('project-carousel')[0];

	  // Get the slides
	  projectSlides = Array.from(projectSlideshow.getElementsByClassName('project-slide'));

	  // Get the current visible
	  currentProjectSlide = projectSlideshow.getElementsByClassName('visible')[0];

	  // Get the projects nav
	  projectSlideNav = Array.from(document.getElementsByClassName('project-carousel-btn'));

	  // Get the previous project button
	  prevProjectBtn = document.getElementsByClassName('js-projects-prev-btn')[0];

	  // Get the next project button
	  nextProjectBtn = document.getElementsByClassName('js-projects-next-btn')[0];

	  // Get the resume project button
	  resumeProjectBtn = document.getElementsByClassName('js-projects-resume-btn')[0];

	  // Get the carousel tips
	  carouselTip = document.getElementById('project-carousel-tip');

	  // Every 5 seconds switch to next slide
	  autoRun = setInterval(function () {
	    nextProject(projectSlides, currentProjectSlide, projectSlideNav);
	  }, PROJECT_TIMER);

	  // Loop through the nav
	  projectSlideNav.forEach(function (nav) {
	    var newIndex = parseInt(nav.innerHTML) + 1;

	    nav.innerHTML = newIndex;

	    nav.addEventListener('click', changeProject);
	  });

	  // Add click event listener
	  prevProjectBtn.addEventListener('click', prevBtnEvent);

	  // Add click event listener
	  nextProjectBtn.addEventListener('click', nextBtnEvent);

	  // Add click event listener
	  resumeProjectBtn.addEventListener('click', function (event) {
	    resumeProjectBtn.classList.remove('visible');
	    nextProject(projectSlides, currentProjectSlide, projectSlideNav);
	    autoRun = setInterval(function () {
	      nextProject(projectSlides, currentProjectSlide, projectSlideNav);
	    }, PROJECT_TIMER);
	  });

	  // Add keyboard event listener
	  window.addEventListener('keydown', keydownEvent);

	  // Add event for mouse wheel
	  window.addEventListener('wheel', updateOnScroll);

	  // Add event for touch starting
	  window.addEventListener('touchstart', touchStartEvent);

	  // Add event for touch moving
	  window.addEventListener('touchmove', touchMoveEvent);

	  /**
	   * @param  {} event
	   */
	  function touchStartEvent(event) {
	    positionX = event.touches[0].clientX;
	    positionY = event.touches[0].clientY;
	  }

	  /**
	   * @param  {} event
	   */
	  function touchMoveEvent(event) {
	    event.preventDefault();

	    if (!positionX || !positionY) {
	      return;
	    }

	    var newX = event.touches[0].clientX,
	        newY = event.touches[0].clientY;

	    var diffX = positionX - newX,
	        diffY = positionY - newY;

	    if (Math.abs(diffX) > Math.abs(diffY)) {
	      if (diffX > 0) {
	        // Left swipe
	        prevBtnEvent(event);
	      } else {
	        // Right swipe
	        nextBtnEvent(event);
	      }
	    } else {
	      if (diffY > 0) {
	        // Up swipe
	        prevBtnEvent(event);
	      } else {
	        // Down swipe
	        nextBtnEvent(event);
	      }
	    }

	    positionX = positionY = null;
	  }

	  function updateOnScroll(event) {
	    event.preventDefault();

	    window.removeEventListener('scroll', updateOnScroll);

	    if (!scrolling) {
	      scrolling = true;
	      !window.requestAnimationFrame ? scrollHijack(event) : window.requestAnimationFrame(function () {
	        scrollHijack(event);
	      });
	    }
	  }

	  function scrollHijack(event) {
	    var delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail)),
	        pattern = /mac/,
	        platform = navigator.platform;

	    if (pattern.test(platform)) {
	      if (delta > 0) {
	        nextBtnEvent(event);
	      } else {
	        prevBtnEvent(event);
	      }
	    } else {
	      if (delta > 0) {
	        prevBtnEvent(event);
	      } else {
	        nextBtnEvent(event);
	      }
	    }

	    scrolling = false;
	    return false;
	  }

	  function keydownEvent(event) {
	    if (event.which === 37 || event.which === 38) {
	      prevBtnEvent(event);
	    } else if (event.which === 39 || event.which === 40) {
	      nextBtnEvent(event);
	    }
	  }

	  function prevBtnEvent(event) {
	    previousProject(projectSlides, currentProjectSlide, projectSlideNav);
	    clearInterval(autoRun);
	    carouselTip.classList.add('hide');
	    resumeProjectBtn.classList.add('visible');
	  }

	  function nextBtnEvent(event) {
	    nextProject(projectSlides, currentProjectSlide, projectSlideNav);
	    carouselTip.classList.add('hide');
	    clearInterval(autoRun);
	    resumeProjectBtn.classList.add('visible');
	  }

	  function previousProject(slides, currentSlide, slideNav) {
	    var newSlide = void 0,
	        currentNav = void 0,
	        newNav = void 0,
	        currentSlideIndex = slides.indexOf(currentSlide);

	    // Set the current nav item to the parent node using currentSlideIndex
	    currentNav = slideNav[currentSlideIndex].parentNode;

	    if (currentSlideIndex === 0) {
	      newSlide = slides[slides.length - 1];
	      newNav = slideNav[slides.length - 1].parentNode;
	    } else {
	      newSlide = slides[currentSlideIndex - 1];
	      newNav = slideNav[currentSlideIndex - 1].parentNode;
	    }

	    currentNav.classList.remove('current');
	    currentSlide.classList.remove('visible');
	    currentSlide.setAttribute('aria-hidden', 'true');
	    newNav.classList.add('current');
	    newSlide.classList.add('visible');
	    newSlide.setAttribute('aria-hidden', 'false');
	    currentProjectSlide = newSlide;
	  }

	  function nextProject(slides, currentSlide, slideNav) {
	    var newSlide = void 0,
	        currentNav = void 0,
	        newNav = void 0,
	        currentSlideIndex = slides.indexOf(currentSlide);

	    // Set the current nav item to the parent node using currentSlideIndex
	    currentNav = slideNav[currentSlideIndex].parentNode;

	    if (currentSlideIndex < slides.length - 1) {
	      newSlide = slides[currentSlideIndex + 1];
	      newNav = slideNav[currentSlideIndex + 1].parentNode;
	    } else {
	      newSlide = slides[0];
	      newNav = slideNav[0].parentNode;
	    }

	    currentNav.classList.remove('current');
	    currentSlide.classList.remove('visible');
	    currentSlide.setAttribute('aria-hidden', 'true');
	    newNav.classList.add('current');
	    newSlide.classList.add('visible');
	    newSlide.setAttribute('aria-hidden', 'false');
	    currentProjectSlide = newSlide;
	  }

	  function changeProject(event) {
	    var newSlide = void 0,
	        index = parseInt(event.target.innerHTML) - 1,
	        currentSlideIndex = projectSlides.indexOf(currentProjectSlide);

	    currentProjectSlide.classList.remove('visible');
	    currentProjectSlide.setAttribute('aria-hidden', 'true');
	    projectSlideNav[currentSlideIndex].parentNode.classList.remove('current');
	    newSlide = projectSlides[index];
	    newSlide.classList.add('visible');
	    newSlide.setAttribute('aria-hidden', 'false');
	    event.target.parentNode.classList.add('current');
	    currentProjectSlide = newSlide;
	    clearInterval(autoRun);
	    resumeProjectBtn.classList.add('visible');
	  }
	}

	exports.Projects = Projects;

/***/ }
/******/ ]);